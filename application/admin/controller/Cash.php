<?php
namespace app\admin\controller;

use app\common\model\VyangAdminPush;
use think\Db;
use think\Request;
use app\admin\model\Common as adminModelCommon;
use app\api\controller\Push as apiPush;
use think\Loader;
/**
 * 提现
 * Class Cash
 * @package app\admin\controller
 */
class Cash extends Common
{
    /**
     * 初始加载
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        //加载是否选中
        $this->assign('active','13');
    }

    /**
     * 提现页面
     * @return mixed
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function cash()
    {
        try {
            // 查询数据 并且每页显示10条数据
            $userid = $this->request->get('userid', '');
            $mobile = $this->request->get('mobile', '');
            $status2 = $this->request->get('status', 0);
            $cash_type = $this->request->get('cash_type', 0);
            $limit = $this->request->get('limit', 500);

            $map = [];
            $map2 = [];
            $page = '';

            $begintime = $this->request->get('begintime', 0);
            //申请时间 日 $begintime 2020-04-22 时间字符串
            if (!empty($begintime)) {
                $time = strtotime($begintime);//开始时间
                $end_time = strtotime(date('Y-m-d 23:59:59', strtotime($begintime)));//结束时间
                $map['cash_time'] = ['between', [$time, $end_time]];
            }

            //申请时间 月
            $begintime_yue = $this->request->get('begintime_yue', '');
            if (!empty($begintime_yue)) {
//            $time = strtotime(date('Y-m-d 00:00:00',strtotime($begintime_yue)));//开始时间
//            $end_time = strtotime(date('Y-m-d 23:59:59',strtotime($begintime)));//结束时间
//            $map['cash_chuli_time']      = ['between', [$time,$end_time]];

                $BeginDate_string = date('Y-m-01 00:00:00', strtotime(date($begintime_yue))); //这个月第一天时间字符串
                $time = strtotime(date('Y-m-01 00:00:00', strtotime(date($begintime_yue)))); //这个月第一天
                $end_time = strtotime(date('Y-m-d 23:59:59', strtotime("$BeginDate_string +1 month -1 day")));//这个月最后一天

                $map['cash_time'] = ['between', [$time, $end_time]];
            }

            if (!empty($userid)) {
                $map['user_id'] = ['eq', $userid];
            } else {
                if (!empty($mobile)) {
                    //根据手机号查询用户id
                    $userdata = Db::name('user')->where(['mobile' => $mobile])->value('user_id');
                    if ($userdata) {
                        $map['user_id'] = ['eq', $userdata];
                    }
                }
            }


            if (!empty($status2)) {
                $map['cash_status'] = ['eq', $status2];
            }
            if (!empty($cash_type)) {
                $map['cash_type'] = ['eq', $cash_type];
            }
            if (!empty($limit)) {
                if (!is_numeric($limit)) {
                    $limit = 20;
                }
                if ($limit <= 0) {
                    $limit = 20;
                }
            } else {
                $limit = 500;
            }


            $list = PageSeach2('ds_cash', $map, $map2, 'cash_id desc', $limit, false, Request::instance()->param());
            $status1111 = [
                '1' => '处理中',
                '2' => '成功',
                '3' => '失败',
            ];
            $cash_type = [1 => '支付宝', 2 => '银行卡'];


            if (!empty($list)) {
                $page = $list->render();
                $list = $list->all();
                foreach ($list as $k => $v) {

                    $list[$k]['cash_typee'] = $cash_type[$v['cash_type']];
                    $list[$k]['cash_statuss'] = $status1111[$v['cash_status']];
                    $list[$k]['cash_time'] = replaceTime($v['cash_time']);
                    if (!empty($v['cash_chuli_time'])) {
                        $list[$k]['cash_chuli_time'] = replaceTime($v['cash_chuli_time']);
                    } else {
                        $list[$k]['cash_chuli_time'] = '';
                    }
                }
            }
            if (!empty($list)) {
                $list = _xss($list);
            }
            // 把分页数据赋值给模板变量list
            $this->assign('cash', $list);
            $this->assign('status', $status1111);
            $this->assign('cash_type', $cash_type);

            $this->assign('show', $page);
        } catch (\Exception $e) {
            pr($e->getMessage());exit;
            ajaxError($e->getMessage());
        }
        // 渲染模板输出
        return $this->fetch();
    }

    //批量手动处理
    public function listEdit()
    {
        $arr    = $this->request->post('arr/a');
        $caozuo = $this->request->post('caozuo');
        $cont   = $this->request->post('cont');
        $time = time();
        if($caozuo == 'yes')
        {
            $where['cash_id'] = ['in', implode(',', $arr)];
            $update           = [
                'cash_status'     => 2,
                'cash_chuli_time'  => $time
            ];
            $res = Db::table('ds_cash')->where($where)->update($update);
            if($res)
            {
                jsonSuccess('200','成功处理');
            }else{
                jsonSuccess('10001','处理错误');
            }
        }else{
            if(empty($cont))
            {
                jsonError('10001','请输入拒绝理由');
            }
            $update           = [
                'cash_status'      => 3,
                'result_msg'       => $cont,
                'cash_chuli_time'  => $time
            ];
            //批量拒绝
            $url = 'http://127.0.0.1:9510/system/add_gold_integral_dian';
            $desc = '提现退回';
            //增加金币
            $info = [
                'type' => 1,    //1增加金币 2增加积分 3增加标点
                'desc' => $desc,    //描述
                'key'  => config('key'),    //key
            ];
            $ci = 0;
            foreach ($arr as $v)
            {
                $ksd = Db::table('ds_cash')->where('cash_id',$v)->where('cash_status',1)->field('user_id,cash_money_2')->find();
                if($ksd)
                {
                    //修改
                    $gai = Db::table('ds_cash')->where('cash_id',$v)->update($update);
                    if($gai)
                    {
                        $ci += 1;
                        //退回金币
                        $info['user_id'] = $ksd['user_id'];
                        $info['num'] = $ksd['cash_money_2'];
                        VyangAdminPush::https_post($url, $info);
                    }
                }
            }
            jsonSuccess('200','成功处理了'.$ci.'条');
        }
    }
    //手动处理提现
    public function edit()
    {
        $id     = $this->request->post('id');
        $type   = $this->request->post('type');
        $text   = $this->request->post('text');
        $time   = time();
        //查找提现记录是否存在
        $res    = Db::table('ds_cash')->where('cash_id',$id)->find();
        if(empty($res))
        {
            jsonError('10001','提现记录不存在');
        }
        if($res['cash_status'] != '1')
        {
            jsonError('10001','该提现记录已被处理');
        }
        if($type == '1')
        {
            $url = 'http://127.0.0.1:9510/system/cash_all';
            $issdds = [
                'cash_id'   => $res['cash_id'],
                'key'       => config('key')
            ];
            VyangAdminPush::https_post($url, $issdds);
            jsonSuccess('200','正在后台付款，请稍后刷新查看结果');
        }else{
            if(empty($text))
            {
                jsonError('10001','请输入拒绝理由');
            }
            $update           = [
                'cash_status'      => 3,
                'result_msg'       => $text,
                'cash_chuli_time'  => $time
            ];
            //拒绝
            $res222 = Db::table('ds_cash')->where('cash_id',$id)->update($update);
            if($res222)
            {
                if($res['cash_bie'] == 3)
                {
                    //余额提现
                    $info = [
                        'type' => 6,
                        'desc' => '提现退回',    //描述
                        'key'  => config('key'),    //key
                    ];
                }elseif ($res['cash_bie'] == 4)
                {
                    //亿豆提现
                    $info = [
                        'type' => 5,
                        'desc' => '提现退回',    //描述
                        'key'  => config('key'),    //key
                    ];
                }
                $url = 'http://127.0.0.1:9510/system/add_gold_integral_dian';
                //增加金币
                //退回金币
                $info['user_id'] = $res['user_id'];
                $info['num'] = $res['cash_money'];
                VyangAdminPush::https_post($url, $info);
                jsonSuccess('200','成功处理');
            }else{
                jsonSuccess('10001','处理错误');
            }
        }
    }
    //处理 未设置账号的用户
    public function edit_shiming()
    {
        $list = Db::table('fa_user_wallet')->where(['wallet_status' =>2 ])->field('wallet_id,user_id')->select();
        $uid = [];
        foreach ( $list as $k => $v)
        {
            $where = [
                'user_id'   => $v['user_id'],
                'status'    => 1,
            ];
            $ravt = Db::table('fa_user_auth')->where($where)->field('zfb,realname')->find();
            if(empty($ravt))
            {
                $uid[] = $v['user_id'];
                $wallet[] = $v['wallet_id'];
            }
        }
        if(!empty($uid))
        {
            $uid1 = @array_unique($uid);
            $uid2 = @array_merge($uid1);
            if(!empty($uid2))
            {
                //设置用户为未实名
                $where1['id'] = ['in', implode(',', $uid2)];
                $where2['user_id'] = ['in', implode(',', $uid2)];
                Db::table('fa_user')->where($where1)->update(['auth' =>0 ]);
                Db::table('fa_user_auth')->where($where2)->delete();
            }
        }
        if(!empty($wallet))
        {
            //设置状态为失败
            $update           = [
                'wallet_status'     => '3',
                'wallet_cont'       => '实名信息有误请重新实名,实名后自动重新发起',
                'wallet_edit_time'  => time()
            ];
            $where3['wallet_id'] = ['in', implode(',', $wallet)];
            Db::table('fa_user_wallet')->where($where3)->update($update);
        }
        jsonSuccess('200','成功处理'.count($uid).'个用户');
    }
    //设置用户为未实名
    function edit_shibai()
    {
        $where = [
            'wallet_status'     => 3,
            'wallet_fail_edit'  => 0,
        ];
        $user_ids = Db::table('fa_user_wallet')->where($where)->column('user_id');
        if(!empty($user_ids))
        {
            $uid1 = @array_unique($user_ids);
            $uid2 = @array_merge($uid1);
            if(!empty($uid2))
            {
                //设置用户为未实名
                $where1['id'] = ['in', implode(',', $uid2)];
                $where2['user_id'] = ['in', implode(',', $uid2)];
                Db::table('fa_user')->where($where1)->update(['auth' =>0 ]);
                Db::table('fa_user_auth')->where($where2)->delete();
            }
        }
        jsonSuccess('200','成功处理'.count($user_ids).'个用户');
    }

    //订单导出
    public function orderxsexcel_out()
    {
        $piostdata = $this->request->post('arr/a',0);
        $path = '/filexlsx/datashoporder' . time() . '.xlsx';
        $name = '列表';
        $title = [
            '编号',
            '用户id',
            '支付宝账号',
            '银行卡',
            '收款人',
            '金额',
            '转账备注',
            '转账类型',
//            '银行名称',
//            '提现状态',
//            '提现申请时间',
        ];
        $url = 'http://'.$_SERVER['HTTP_HOST'].$path;
        $d = [];

        //查询订单
        $where['cash_id'] = ['in', implode(',', $piostdata)];

        $order_data = Db::name('cash')->where($where)->select();
        $cash_type = [
          '1' => '支转支',
          '2' => '支转卡',
        ];
        $cash_status = [
          '1' => '申请提现',
          '2' => '成功',
          '3' => '失败',
        ];

        foreach ($order_data as $k => $v)
        {
            $d[$k]['编号'] = $v['cash_id'];
            $d[$k]['用户id'] = $v['user_id'];
            if($v['cash_type'] == 1){
                $d[$k]['支付宝账号'] = $v['payee_account'];
                $d[$k]['银行卡'] = '';
            }else{
                $d[$k]['支付宝账号'] = '';
                $d[$k]['银行卡'] = $v['payee_account'];
            }
            $d[$k]['收款人'] = $v['payee_real_name'];
            $d[$k]['金额'] = $v['cash_money_2'];
            $d[$k]['转账备注'] = '提现';
            $d[$k]['转账类型'] = $cash_type[$v['cash_type']];

//            $d[$k]['银行名称'] = $v['payee_bank_name']?$v['payee_bank_name']:'no';
//            $d[$k]['提现状态'] = $cash_status[$v['cash_status']];
//            $d[$k]['提现申请时间'] = date('Y-m-d H:i:s',$v['cash_time']);
        }

        $data = $d;
        $odata = wps($name,$title,$data,ROOT_PATH.'/public'.$path);

        if($odata){
            return jsonSuccess(200,"<a href='". $url ."'>点击立即下载</a>  ".$url,['url' =>$url ]);
        }else{
            return jsonError(500,'当前人数太多，处理失败，请稍后再试','');
        }
    }

    //批量发货显示页面
    public function shopbkorderplfh_index()
    {
        try {
            return $this->fetch();
        } catch (\Exception $e) {
            pr($e->getMessage());exit;
            ajaxError($e->getMessage());
        }
    }

    //批量处理-文件上传
    public function shopbkorderplfh_upload()
    {

    //        $a = '/uploads/20210505/904f74382464997b5aeb831d903bad30.xlsx';
    //        $this->chuliplfh($a);
            $scr = $this->request->file('filename');
            if(!empty($scr))
            {
                $data = upload($scr);
                if($data['status'] == 200)
                {
                    //上传成功
                    $add = $data['datas']['filename'];

                    $this->chuliplfh($add);
                }else{
                    ajaxError($data['msg']);
                }
            }else{
                ajaxError('文件为空');
            }

    }

    //处理批量
    private function chuliplfh($add)
    {
        try {
            $address = ROOT_PATH.'public'.$add;
            // 引入文件
            Loader::import('PHPExcel.Classes.PHPExcel', VENDOR_PATH);
            Loader::import('PHPExcel.Classes.PHPExcel.IOFactory.PHPExcel_IOFactory', VENDOR_PATH);

            // 构造PHPExcel对象
            $objPHPExcel = \PHPExcel_IOFactory::load($address);

            // 读取第一个sheet页
            $objPHPExcel->setActiveSheetIndex(0);
            // 将对象转换为数组
            $content = $objPHPExcel->getActiveSheet()->toArray();
            // 处理数据
            $err = [];//检查文件错误数据

            if(count($content) >= 2)
            {
                if(count($content) > 510){
                    ajaxError('数据不能超过500');
                }

                //校验第一排数据
                if(empty($content[0][0]) || empty($content[0][1]) || empty($content[0][2]) || empty($content[0][3])){
                    if($content[0][0] !== '编号' || $content[0][1] !== '用户id' || $content[0][2] !== '结果' || $content[0][3] !== '备注'){
                        ajaxError('第一排，第一列、第二列、第三列、第四列必须按照范本填写标题：编号、用户id、结果、原因');
                    }
                    ajaxError('第一排，第一列、第二列、第三列、第四列不能为空');
                }

                unset($content[0]);

                //先检测
                foreach ($content as $v)
                {
                    if(!is_numeric($v[0])){
                        ajaxError('编号：' . $v[0] . '：不是数字');
                    }
                    if(!is_numeric($v[1])){
                        ajaxError('编号：' . $v[0] . '：用户id不是数字');
                    }
                    if(!empty($v[2])){
                        if(!is_numeric($v[2])){
                            ajaxError('编号：' . $v[0] . '：结果不是数字，失败的必须填3');
                        }
                        if($v[2] != 3){
                            ajaxError('编号：' . $v[0] . '：失败只能是3');
                        }
                        if(empty($v[3])){
                            ajaxError('编号：' . $v[0] . '：失败必须填写原因');
                        }
                    }
                    $order_data = Db::name('cash')->where([
                        'cash_id' => ['eq',$v[0]],
                        'user_id' => ['eq',$v[1]]
                    ])->field('user_id,cash_status')->find();

                    if(empty($order_data)){

                        ajaxError('该条用户提现不存在，请核对,编号：'.$v[0]);
                    }
                    if(empty($order_data['user_id'])){
                        ajaxError('没有该用户,请核对，编号：'.$v[0]);
                    }
                    if($order_data['cash_status'] != 1){
                        ajaxError('该记录已处理，请移除,编号：'.$v[0]);
                    }
                }


                foreach ($content as $v)
                {

                    //查询订单详情
                    $order_data = Db::name('cash')->where(['cash_id' => ['eq',$v[0],'user_id' => $v[1]]])->field('user_id,cash_status')->find();
                    if(empty($order_data['user_id']))
                    {
                        array_push($err,$v['0']);
                        continue;
                    }
                    if($order_data['cash_status'] != 1){
                        array_push($err,$v['0']);
                        continue;
                    }
                    $update['cash_status'] = 2;
                    $update['cash_chuli_time'] = time();
                    $update['result_msg'] = '';
                    if($v[2] == 3){
                        $update['cash_status'] = 3;
                        $update['result_msg'] = $v[3]?$v[3]:'订单异常';
                    }
//                    if(empty($v[2]))
//                    {
//                        array_push($err,$v[20]);
//                        continue;
//                    }
                    $orderdata = Db::name('cash')->where(['cash_id' => $v[0],'user_id' => $v[1]])->update($update);
                    if (!$orderdata)
                    {
                        array_push($err,$v[0]);
                        continue;
                    }
                    if($v[2] == 3){
                        $info =[
                            'cash_id'   => $v[0],
                            'key'       => config('key'),    //key
                        ];
                        $url = 'http://127.0.0.1:9510/system/cash_tui';
                        VyangAdminPush::https_post($url, $info);
                    }
                }
                $tishierror = array(
                    'err' => implode(',',$err),//检查文件错误数据
                );
                ajaxSuccess('执行数量'.count($content).'个','200',$tishierror);
            }else{
                ajaxError('数据不能为空');
            }
        } catch (\Exception $e) {
            print_r($e->getMessage());exit;
            ajaxError($e->getMessage());
        }
    }
}
