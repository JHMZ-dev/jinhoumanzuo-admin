<?php
namespace app\admin\controller;

use app\common\model\Common as Common2;
use app\common\model\VyangAdminPush;
use think\Db;
use think\Request;
use think\Loader;

/**
 * 用户管理
 * Class User
 * @package app\admin\controller
 */
class User extends Common
{
    protected $pid;

    /**
     * 初始加载
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        //加载是否选中
        $this->assign('active', '5');
    }

    //获取表格的内容
    public function get_xlsx()
    {
//        $address = ROOT_PATH.'/public'.'/address.xlsx';
//
//        // 引入文件
//        Loader::import('PHPExcel.Classes.PHPExcel', VENDOR_PATH);
//        Loader::import('PHPExcel.Classes.PHPExcel.IOFactory.PHPExcel_IOFactory', VENDOR_PATH);
//
//        // 构造PHPExcel对象
//        $objPHPExcel = \PHPExcel_IOFactory::load($address);
//
//        // 读取第一个sheet页
//        $objPHPExcel->setActiveSheetIndex(0);
//        // 将对象转换为数组
//        $content = $objPHPExcel->getActiveSheet()->toArray();
////        pr($content);
//
//        // 处理数据
//        $re = 0;
//        if(!empty($content))
//        {
//            for ($i=1;$i<count($content);$i++)
//            {
//                $dat = [
//                    'id'        => $content[$i][0],
//                    'name'      => $content[$i][1],
//                    'parentId'  => $content[$i][2],
//                    'level'     => $content[$i][3],
//                ];
//                $ve = Db::table('ds_shop_category')->insert($dat);
//                if($ve)
//                {
//                    $re +=1;
//                }else{
//                    pr($dat);
//                }
//            }
//        }
//        pr($re);


    }

    /**
     * 用户管理
     * @return mixed
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function user()
    {
        // 查询用户数据 并且每页显示10条数据
        $cont = $this->request->get('cont', '');
        $status = $this->request->get('status', 0);
        $paixu = $this->request->get('paixu', 0);
        $xingji = $this->request->get('xingji', 0);


        $map = [];
        if (!empty($cont)) {
            switch ($status) {
                case '1':
                    $map['user_id'] = ['eq', $cont];
                    break;
                case '2':
                    $map['nickname'] = ['like', "%$cont%"];
                    break;
                case '3':
                    $map['mobile'] = ['eq', $cont];
                    break;
                case '4':
                    $map['auth_num'] = ['eq', $cont];
                    break;
                case '5':
                    $map['ma_zhitui'] = ['eq', strtolower($cont)];
                    break;
                case '6':
                    $map['ma_paixian'] = ['eq', strtolower($cont)];
                    break;
                case '7':
                    $map['ip'] = ['eq', $cont];
                    break;
            }
        }
        $xingji2 = [
            '一星达人',
            '二星达人',
            '三星达人',
            '四星达人',
            '五星达人',
        ];
        if ($xingji) {
            if($xingji == 6)
            {
                $map['yunc'] = ['eq', 1];
            }else{
                $map['group'] = ['eq', $xingji];
            }
        }
        $order = 'user_id desc';
        $paixu2 = [
            0 => '影票排序',
            1 => '通证排序',
            2 => '铺满排序',
        ];
        if ($paixu) {
            switch ($paixu) {
                case 1:
                    $order = 'yingpiao desc';
                    break;
                case 2:
                    $order = 'tongzheng desc';
                    break;
                case 3:
                    $order = 'puman desc';
                    break;
                    break;
            }
        }
        $list = PageSeach('user', $map, [], $order, '10', false, Request::instance()->param());
        if (!empty($list)) {
            $listall = $list->all();//【重点】 将分页数据转成实际数据数组，否则不能修改
            $page = $list->render();
            $a2 = [0 => '状态正常', 1 => '黑名单',2 => '假注销'];

            foreach ($listall as $k => $v) {
                $listall[$k]['group_name'] = Db::name('user_group')->where('group', $v['group'])->value('group_name');
                $listall[$k]['login_status2'] = $a2[$v['login_status']];
                $user_id = $v['user_id'];

                $this->xiao_redis->select(6);
                $listall[$k]['team'] = $this->xiao_redis->sCard($user_id . '_team_user') ? $this->xiao_redis->sCard($user_id . '_team_user') : '0';
                $listall[$k]['_team_user_real'] = $this->xiao_redis->sCard($user_id . '_team_user_real') ? $this->xiao_redis->sCard($user_id . '_team_user_real') : '0';

                $this->xiao_redis->select(5);
                $listall[$k]['_zhi_user'] = $this->xiao_redis->get($user_id . '_zhi_user') ? $this->xiao_redis->get($user_id . '_zhi_user') : '0';
                $listall[$k]['_jian_user'] = $this->xiao_redis->get($user_id . '_jian_user') ? $this->xiao_redis->get($user_id . '_jian_user') : '0';
                $listall[$k]['_zhi_user_real'] = $this->xiao_redis->get($user_id . '_zhi_user_real') ? $this->xiao_redis->get($user_id . '_zhi_user_real') : '0';
                $listall[$k]['_jian_user_real'] = $this->xiao_redis->get($user_id . '_jian_user_real') ? $this->xiao_redis->get($user_id . '_jian_user_real') : '0';
                //查询个人贡献值
                $listall[$k]['geren_huoyue'] = $this->xiao_redis->get($user_id.'_gongxianzhi')?$this->xiao_redis->get($user_id.'_gongxianzhi'):0;
                $listall[$k]['team_login_status'] = $this->xiao_redis->get($user_id . '_team_login_status') ? $this->xiao_redis->get($user_id . '_team_login_status') : '0';

                $listall[$k]['zhi_login_status'] = $this->xiao_redis->get($user_id . '_zhi_login_status') ? $this->xiao_redis->get($user_id . '_zhi_login_status') : '0';
                $listall[$k]['jian_login_status'] = $this->xiao_redis->get($user_id . '_jian_login_status') ? $this->xiao_redis->get($user_id . '_jian_login_status') : '0';

                //查询团队贡献值
                $team_huoyue  = $this->xiao_redis->get($user_id.'_team_gongxianzhi') ? $this->xiao_redis->get($user_id.'_team_gongxianzhi')  : 0;

                //大小区贡献值
                $_daqu_gongxianzhi_user_id = $this->xiao_redis->get($user_id.'_daqu_gongxianzhi_user_id')?$this->xiao_redis->get($user_id.'_daqu_gongxianzhi_user_id'):0;
                if($_daqu_gongxianzhi_user_id > 0)
                {
                    $_daqu_gongxianzhi_user_id_2 = $this->xiao_redis->get($user_id.'_daqu_gongxianzhi_user_id_2')?$this->xiao_redis->get($user_id.'_daqu_gongxianzhi_user_id_2'):0;
                    if($_daqu_gongxianzhi_user_id_2 > 0)
                    {
                        $daqu_huoyue = $this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_team_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_team_gongxianzhi'):0;
                        $daqu_huoyue += $this->xiao_redis->get($_daqu_gongxianzhi_user_id_2.'_team_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id_2.'_team_gongxianzhi'):0;
                        $ree = $this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_gongxianzhi'):0;
                        $ree += $this->xiao_redis->get($_daqu_gongxianzhi_user_id_2.'_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id_2.'_gongxianzhi'):0;
                    }else{
                        $daqu_huoyue = $this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_team_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_team_gongxianzhi'):0;
                        $ree = $this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_gongxianzhi'):0;
                    }
                    $daqu_huoyue += (int)$ree;
                    $xiaoqu_huoyue = (int)($team_huoyue - $daqu_huoyue);
                }else{
                    $daqu_huoyue = 0;
                    $xiaoqu_huoyue  =  0;
                }

                $listall[$k]['team_huoyue'] = $team_huoyue;
                $listall[$k]['daqu_huoyue'] = $daqu_huoyue;
                $listall[$k]['xiaoqu_huoyue'] = $xiaoqu_huoyue;
                $listall[$k]['ma_zhitui'] = strtoupper($v['ma_zhitui']);
                $listall[$k]['ma_paixian'] = strtoupper($v['ma_paixian']);
            }
            $listall = _xss($listall);
        } else {
            $listall = [];
            $page = '';
        }


        // 把分页数据赋值给模板变量list
        $this->assign('user', $listall);
        $this->assign('show', $page);

        $this->assign('paixu2', $paixu2);
        $this->assign('xingji2', $xingji2);

        $this->assign('username', $this->userInfo['username']);

        $this->assign('active', '6');
        return $this->fetch();
    }
    public function get_pay_info()
    {
        $id = $this->request->param('id');

        $res = Db::name('jiaoyi')->where('jiaoyi_id', $id)->find();
        if (empty($res)) {
            $this->error('此交易不存在');
//            jsonError('10001','此用户不存在');
        }
        if(!empty($res['pay_cont']))
        {
            $data = json_decode($res['pay_cont'],true);
            foreach ($data as $v)
            {
                if($v['type'] == 1)
                {
                    $img = $v['cont'];
                    echo "支付宝收款码：<img src='$img' style='width: 400px;height: 400px;'>"."<br>";
                }
                if($v['type'] == 2)
                {
                    $img = $v['cont'];
                    echo "微信收款码：<img src='$img' style='width: 400px;height: 400px;'>"."<br>";
                }
                if($v['type'] == 3)
                {
                    echo "支付宝姓名：".$v['cont']['name']." 支付宝账号：".$v['cont']['ali_account']."<br>";
                }
                if($v['type'] == 4)
                {
                    echo "银行卡姓名：".$v['cont']['name']." 银行卡账号：".$v['cont']['bank_account']." 开户行名字：".$v['cont']['bank_name'].PHP_EOL;
                }
            }
        }else{
            echo '';
        }
    }
    //根据id查询用户信息
    public function get_user_info()
    {
        $user_id = $this->request->param('id');
//        AreaGroupUser::_check_lord2($user_id);
        $res = Db::name('user')->where('user_id', $user_id)->find();
        if (empty($res)) {
            $this->error('此用户不存在');
//            jsonError('10001','此用户不存在');
        }
        $data = [
            'nickname' => $res['nickname'],    //昵称
            'mobile' => $res['mobile'],      //手机号
            'pid' => $res['pid'],
            'img' => $res['avatar'],
            'ip' => $res['ip'],
            'auth_name' => $res['auth_name'],
            'auth_num' => $res['auth_num'],
            'password' => $res['password'],
            'pay_password' => $res['pay_password'],
            'login_status' => $res['login_status'] == 1 ? '禁止登录' : '正常',
            'login_type' => $res['login_status'],
            'reg_time' => replaceTime($res['reg_time']),      //注册时间
            'cont' => $res['cont'],
        ];
        $data = _xss($data);
        $this->assign('userinfo', $data);
        $this->assign('user_id', $user_id);
        return $this->fetch();
    }

    /**
     * 登录/禁止登录
     */
    public function user_login_status()
    {
        $user_id = $this->request->post('id');
        $type = $this->request->post('type');
        if ($type == 1) {
            $update = ['login_status' => 1];
        }elseif ($type == 2)
        {
            $update = ['login_status' => 2];
        } else {
            $update = ['login_status' => 0];
        }
        $res = Db::name('user')->where('user_id', $user_id)->update($update);
        if ($res) {
            Db::name('user_token')->where('user_id', $user_id)->delete();
            ajaxSuccess('操作成功');
        } else {
            ajaxError('操作失败,请重试');
        }
    }


    /**
     * 导入注册
     */
    public function daoruzhuce()
    {
        // 查询用户数据 并且每页显示10条数据
        $title     = $this->request->get('title','');
        $map     = [];
        if(!empty($title))
        {
            $map['title']           = ['like', "%$title%"];
        }
        $list = PageSeach2('ds_daoru', $map,[], 'daoru_id desc', '10', false, Request::instance()->param());
        if (!empty($list))
        {
            $listall = $list->all();//【重点】 将分页数据转成实际数据数组，否则不能修改
            $page = $list->render();
            $this->xiao_redis->select(3);
            foreach ($listall as $k => $v)
            {
                $da = json_decode($v['data'],true);
                $listall[$k]['data'] = implode(PHP_EOL,$da);
                $ddd = $this->xiao_redis->SMEMBERS('daoru_id_'.$v['daoru_id']);
                if(!empty($ddd))
                {
                    $listall[$k]['res'] =  implode("\r\n",$ddd);
                }
//                if(!empty($v['res']))
//                {
//                    $da2 = json_decode($v['res'],true);
//                    $listall[$k]['res'] = implode(PHP_EOL,$da2);
//                }
            }
        }else{
            $listall = [];
        }
        // 把分页数据赋值给模板变量list
        $this->assign('list', $listall);
        $this->assign('show', $page);
        return $this->fetch();
    }

    /**
     * 导入注册
     */
    public function daoruzhuce_upload()
    {
        $scr = $this->request->file('filename');
        if(!empty($scr))
        {
            $data = upload($scr);
            if($data['status'] == 200)
            {
                //上传成功
                $add = $data['datas']['filename'];
                $this->chuli($add);
            }else{
                ajaxError($data['msg']);
            }
        }
    }
    private function chuli($add)
    {
        $address = ROOT_PATH.'/public'.$add;

        // 引入文件
        Loader::import('PHPExcel.Classes.PHPExcel', VENDOR_PATH);
        Loader::import('PHPExcel.Classes.PHPExcel.IOFactory.PHPExcel_IOFactory', VENDOR_PATH);

        // 构造PHPExcel对象
        $objPHPExcel = \PHPExcel_IOFactory::load($address);

        // 读取第一个sheet页
        $objPHPExcel->setActiveSheetIndex(0);
        // 将对象转换为数组
        $content = $objPHPExcel->getActiveSheet()->toArray();

        // 处理数据
        $arr = [];
        if(!empty($content))
        {
            foreach ($content as $k => $v)
            {
                if(!is_numeric($v['0']))
                {
                    ajaxError('第'.$k.'行的：['.$v['0'].']手机号格式有误');
                    break;
                }
                if($this->isMobile($v['0']))
                {
                    $arr[] = $v['0'];
                }else{
                    ajaxError('第'.$k.'行的：['.$v['0'].']手机号格式有误');
                    break;
                }
            }
        }
        if(empty($arr))
        {
            ajaxError('数据格式有误');
        }else{
            if(count($arr) > 10000)
            {
                ajaxError('导入号码最多支持10000个');
            }
            //删除文件
            unlink($address);
            //写入数据库
            $res = Db::table('ds_daoru')->insertGetId(['data' =>json_encode($arr) ]);
            if($res)
            {
                $ge = count($arr);
                $miao = $ge /15;
                //异步执行注册
                VyangAdminPush::daoru_reg($res);
                ajaxSuccess('成功导入'.$ge.'个号码,正在后台注册, 预计时间：'.$miao.'秒');
            }else{
                ajaxError('导入失败,请重试');
            }
        }
    }

    public function paixian()
    {
        $mobile = $this->request->get('user_id',0);
        if($this->isMobile($mobile))
        {
            $user_id = Db::name('user')->where('mobile',$mobile)->value('user_id');
        }else{
            $user_id = Db::name('user')->where('user_id',$mobile)->value('user_id');
        }
        if(!$user_id)
        {
            ajaxError('系统没有此账号！');
        }
        $res = Db::name('user_line')->where('user_id',$user_id)->select();
        if(empty($res))
        {
            echo '没有排线信息！';
        }else{
            foreach ($res as $v)
            {
                $mobile = Db::name('user')->where('user_id',$v['son_id'])->value('mobile');
                echo '排线序号：['.$v['num'].']  排线用户id：['.$v['son_id'].']  排线手机号：['.$mobile.']'."<br>";
            }
        }
    }
    
    //实名认证
    public function shiming()
    {
        $user_id = $this->request->post('user_id');
        $auth = Db::name('user')->where('user_id',$user_id)->value('auth');
        if($auth == 1)
        {
            ajaxError('用户已实名！');
        }
        $info =[
            'user_id'   => $user_id,
            'key'       => config('key'),    //key
        ];
        $url = 'http://127.0.0.1:9510/system/auth';
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }

    /**
     * 验证是否是有效手机号
     * @param $num
     * @return false|int
     */
    protected function isMobile($num)
    {
        return preg_match("/^1[3456789]{1}\d{9}$/",$num);
    }


    /**
     * 查无线上级
     */
    public function user_cha_pid()
    {
        $user_id = $this->request->param('user_id');
        if(!empty($user_id))
        {
            $this->shangji($user_id);
        }
    }

    public function user_chazhi()
    {
        $user_id = $this->request->param('user_id');
        if(!empty($user_id))
        {
            $res = Db::name('user')->where('pid',$user_id)->field('user_id,nickname,mobile,group,auth,reg_time,login_status')->select();
            if(!empty($res))
            {
                $a2 = [0 => '状态正常', 1 => '黑名单',2 => '假注销'];
                foreach ($res as $v)
                {
                    if($v['auth'] == 1)
                    {
                        $auth = '已实名';
                    }else{
                        $auth = '未实名';
                    }
                    $login_status2 = $a2[$v['login_status']];
                    $group_name = Db::name('user_group')->where('group', $v['group'])->value('group_name');
                    $time = date("Y-m-d H:i:s", (int)$v['reg_time']);
                    echo '用户id为：'.$v['user_id'].' 昵称为：'.$v['nickname'].' 手机号为：'.$v['mobile'].' 星级为：'.$group_name.' 实名状态：'.$auth.' 注册时间：'.$time." 账号状态：$login_status2<br>";
                }
            }else{
                echo '无下级';
            }
        }else{
            echo '无下级';
        }
    }
    protected function shangji($user_id)
    {
        $this->xiao_redis->select(5);
        $pid = $this->xiao_redis->get($user_id . '_pid');
        if($pid > 0)
        {
            $inf = Db::name('user')->where('user_id',$pid)->field('nickname,mobile')->find();
            echo $user_id.'的上级id为：'.$pid.'的昵称：'.$inf['nickname'].'的手机号：'.$inf['mobile']."<br>";
            $this->shangji($pid);
        }
    }

    /**
     * 改号码
     */
    public function user_gaihaoma()
    {
        $mobile = $this->request->param('mobile');
        $mobile2 = $this->request->param('mobile2');
        if(empty($mobile) || empty($mobile2))
        {
            ajaxError('号码有误');
        }
        if(!$this->isMobile($mobile2))
        {
            ajaxError('号码有误');
        }
        //判断是否是已注册
        $info = Db::name('user')->where('mobile',$mobile)->find();
        if(empty($info))
        {
            ajaxError($mobile.' 没有注册');
        }
        //判断该手机号是否已注册
        $user_id = Db::name('user')->where('mobile',$mobile2)->value('user_id');
        if($user_id > 0)
        {
            ajaxError($mobile2.'  已注册');
        }
        //修改账号
        $update = [
            'username'  => $mobile2,
            'mobile'    => $mobile2,
        ];
        $user_id = $info['user_id'];
        $res =  Db::name('user')->where('user_id',$user_id)->update($update);
        if($res)
        {
            Db::name('user_token')->where('user_id',$user_id)->delete();
            Db::name('user_web_token')->where('user_id',$user_id)->delete();
            ajaxSuccess('修改成功');
        }else{
            ajaxError('修改失败,请重试');
        }
    }


    /**
     * 以倒序/顺序的方式排序指定数组值的内容
     * @param $data           //数据
     * @param $zhi            //指定值
     * @param bool $fangshi   //方式 true 正序  false 倒叙
     * @return mixed
     */
    protected function arr_paixu($data,$zhi,$fangshi = false)
    {
        // 取得列的列表
        foreach ($data as $key => $row)
        {
            $volume[$key]  = $row[$zhi];
        }
        if($fangshi){
            array_multisort($volume, SORT_ASC, $data);
        }else{
            array_multisort($volume, SORT_DESC, $data);
        }
        return $data;
    }
    public function getAge($id)
    {
        # 1.从身份证中获取出生日期
        $birth_Date = strtotime(substr($id, 6, 8));//截取日期并转为时间戳
        # 2.格式化[出生日期]
        $Year = date('Y', $birth_Date);//yyyy
        $Month = date('m', $birth_Date);//mm
        $Day = date('d', $birth_Date);//dd
        # 3.格式化[当前日期]
        $current_Y = date('Y');//yyyy
        $current_M = date('m');//mm
        $current_D = date('d');//dd
        # 4.计算年龄()
        $age = $current_Y - $Year;//今年减去生日年
        if($Month > $current_M || $Month == $current_M && $Day > $current_D)
        {//深层判断(日)
            $age--;//如果出生月大于当前月或出生月等于当前月但出生日大于当前日则减一岁
        }
        # 返回
        return $age;
    }


    /**
     * @return mixed
     */
    public function user_online()
    {
        $this->assign('active', '0');
//        $id = 754976;
//        $res = Db::name('user_line')->where('user_id',$id)->select();
//        foreach ($res as $v)
//        {
//            $mobile = Db::name('user')->where('user_id',$v['son_id'])->value('mobile');
//            echo '排线号：['.$v['num'].']排线用户id：['.$v['son_id'].']排线手机号：['.$mobile.']'."<br>";
//        }
//        exit;

//        echo "queue:failed日志：".PHP_EOL;
//
//        //读取fale数据从新投递任务
//        $this->xiao_redis->select(0);
//        $res = $this->xiao_redis->LRANGE('queue:failed',0,10);
//        pr($res);
//        echo "queue:timeout日志：".PHP_EOL;
//        $this->xiao_redis->select(0);
//        $res = $this->xiao_redis->LRANGE('queue:timeout',0,10);
//        pr($res);
//
//
//        exit;

        $num = $this->request->get('num',14);//天数
        if(!is_numeric($num))
        {
            $num =14;
        }
        $num = (int)$num;
        if($num < 1 || $num > 60)
        {
            $num = 14;
        }
        //查询最近一周活跃用户量
        $days = [];
        $res = [];
        $renwu = [];
        $kou = [];
        for ($i=0;$i<$num;$i++)
        {
            $d = date("Y-m-d",strtotime("-$i day"));
            $this->xiao_redis->select(0);
            $kou[] = $this->xiao_redis->get($d.'_jiekou')<0?0:$this->xiao_redis->get($d.'_jiekou');
            $res[] = $this->xiao_redis->sCard($d.'_user')<0?0:$this->xiao_redis->sCard($d.'_user');
            $renwu[] = $this->xiao_redis->sCard($d.'youxiao_user')<0?0:$this->xiao_redis->sCard($d.'youxiao_user');
            $days[] = substr($d,5);
        }
        $res = array_reverse($res);
        $renwu = array_reverse($renwu);
        $days = array_reverse($days);
        $kou = array_reverse($kou);
        $renwu = implode(',',$renwu);
        $res = implode(',',$res);
        $kou = implode(',',$kou);
        $asd = '';
        foreach ($days as $v)
        {
            $asd .= '"'.$v.'",';
        }
        $this->assign('days',$asd);
        $this->assign('res',$res);
        $this->assign('renwu',$renwu);
        $this->assign('kou',$kou);
        $this->assign('tian',$num);

        return $this->fetch();
    }

    public function chadaquweima()
    {
        return $this->fetch();
    }

    public function chadaquweima_edit()
    {
        $mobile = $this->request->post('mobile','');
        if(isMobile($mobile))
        {
            $user_id = Db::name('user')->where('mobile',$mobile)->value('user_id');
        }else{
            $user_id = Db::name('user')->where('user_id',$mobile)->value('user_id');
        }
        if(!$user_id)
        {
            ajaxError('该账号不存在！');
        }
        $this->xiao_redis->select(5);
        //查询这个人大区的人
        $_daqu_auth_id = $this->xiao_redis->get($user_id.'_daqu_auth_id');
        if(!$_daqu_auth_id)
        {
            return $this->wuxian_cha_weima($user_id);
        }
        $son_id = Db::name('user_line')->where('user_id',$_daqu_auth_id)->order('num desc')->value('son_id');
        if(!$son_id)
        {
            return $this->wuxian_cha_weima($user_id);
        }
        $res = Db::name('user')->where('user_id',$son_id)->field('user_id,nickname,mobile')->find();
        $cont =  $mobile.'的大区尾码如下<br>id为：'.$res['user_id'].' <br>昵称为：'.$res['nickname'].' <br>手机号为：'.$res['mobile'];
        ajaxSuccess($cont);
    }

    public function wuxian_cha_weima($user_id)
    {
        $uids = Db::name('user')->where('pid',$user_id)->column('user_id');
        if(!empty($uids))
        {
            if(count($uids) == 1)
            {
                $this->wuxian_cha_weima($uids[0]);
            }else{
                $id = $this->panduan($uids);
                $this->wuxian_cha_weima($id);
            }
        }else{
            $res = Db::name('user')->where('user_id',$user_id)->field('user_id,nickname,mobile')->find();
            $cont =  '大区尾码如下<br>id为：'.$res['user_id'].' <br>昵称为：'.$res['nickname'].' <br>手机号为：'.$res['mobile'];
            ajaxSuccess($cont);
        }
    }

    /**
     *
     * @param $uids
     * @return mixed
     */
    public function panduan($uids)
    {
        $this->xiao_redis->select(6);
        $data = [];
        foreach ($uids as $k =>  $v)
        {
            $data[$k]['user_id'] = $v;
            $data[$k]['ren'] = $this->xiao_redis->sCard($v.'_team_user') ? $this->xiao_redis->sCard($v.'_team_user')  : '0';
        }
        $datas = arr_paixu($data,'ren');
        if(!empty($datas[0]['user_id']))
        {
            return $datas[0]['user_id'];
        }else{
            ajaxError('未找到');
        }
    }
    /**
     * 减少页面
     */
    public function user_all_del()
    {
        $type = $this->request->get('type');
        $this->assign('type',$type);
        switch ($type)
        {
            case 1:
                $this->assign('name','任务包');
                $info = Db::name('task_pack')->field('task_pack_id,name')->order('paixu asc')->select();
                $this->assign('info',$info);
                return $this->fetch('user_all_del2');
                break;
            case 2:
                $this->assign('name','影票');
                break;
            case 3:
                $this->assign('name','通证');
                break;
            case 4:
                $this->assign('name','扑满');
                break;
            default:
                ajaxError('类型选择错误');
                break;
        }
        return $this->fetch();
    }

    /**
     * 减少处理
     */
    public function user_all_del_edit()
    {
        $type = $this->request->post('type');
        $num = $this->request->post('num');
        $ids = $this->request->post('cont');
        $desc = $this->request->post('desc');
        if(!is_numeric($num))
        {
            ajaxError('数量填写有误');
        }
        if($num < 0)
        {
            ajaxError('数量填写有误');
        }
        if(empty($ids))
        {
            ajaxError('id填写有误');
        }
        switch ($type)
        {
            case 1:
                if($desc <= 0)
                {
                    ajaxError('请选择任务包');
                }
                break;
            case 2: case 3:case 4:case 5:case 6:
            if(empty($desc))
            {
                ajaxError('减少理由不能少');
            }
            break;
            default:
                ajaxError('类型选择错误');
                break;
        }
        //整理人
        $asd = explode("\n",$ids);
        $asdasd = implode(',',$asd);
        $info =[
            'user_id'   => $asdasd,
            'num'       => $num,
            'desc'      => $desc,
            'type'      => $type,
            'key'  => config('key'),    //key
        ];
        $url = 'http://127.0.0.1:9510/system/del_gold_integral_dian';
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }

    /**
     * 兜底
     */
    public function doudi()
    {
        $type = $this->request->get('type',1);
        $this->assign('type',$type);
        return $this->fetch();
    }
    //处理兜底
    public function doudi_edit()
    {
        $sm = $this->request->post('sm','');
        $wm = $this->request->post('wm','');
        $huoyuezhi = $this->request->post('huoyuezhi',0);
        $type = $this->request->post('type',1);
        $baohan = $this->request->post('baohan',0);
        if($baohan !=0 )
        {
            $baohan = 1;
        }
        if(empty($sm) || empty($wm) || empty($huoyuezhi))
        {
            ajaxError('请填写完整信息');
        }
        if(!is_numeric($huoyuezhi))
        {
            ajaxError('活跃值只能为数字');
        }
        $info =[
            'sm'            => $sm,
            'wm'            => $wm,
            'huoyuezhi'     => $huoyuezhi,
            'type'          => $type,
            'status'        => $baohan,
            'key'   => config('key'),    //key
        ];
        $url = 'http://127.0.0.1:9510/system/doudi';
        $res = VyangAdminPush::https_post($url, $info);
        if($res['code'] == 200)
        {
            ajaxSuccess('操作成功');
        }else{
            ajaxError($res['msg']);
        }

    }
    /**
     * 查看日志
     */
    public function get_user_logs()
    {
        $type    = $this->request->param('type');
        $user_id = $this->request->param('user_id');
        $page    = $this->request->param('page','1');
        switch ($type)
        {
            case 1:
                //日志
                $res = PageSeach('user_shufen', ['user_id' => $user_id],[], 'user_shufen_id desc', '10', false, Request::instance()->param());
                $data = [];
                if(!empty($res))
                {
                    $page = $res->render();
                    $tt = ['1' =>'增加','2' => '减少'];
                    foreach ($res as $k => $v)
                    {
                        $data[$k]['id'] = $res[$k]['user_shufen_id'];
                        $data[$k]['type']  = $tt[$v['user_shufen_type']];
                        $data[$k]['before'] = $res[$k]['user_shufen_before'];
                        $data[$k]['change'] = $res[$k]['user_shufen_change'];
                        $data[$k]['after'] = $res[$k]['user_shufen_after'];
                        $data[$k]['cont'] = $res[$k]['user_shufen_cont'];
                        $data[$k]['time']  = replaceTime($v['user_shufen_time']);
                    }
                }
                // 把分页数据赋值给模板变量list
                $this->assign('data',$data);
                $this->assign('show',$page);
                return $this->fetch('get_user_logs1');
                break;
            case 2:
                //日志
                $res = PageSeach('user_yingpiao', ['user_id' => $user_id],[], 'user_yingpiao_id desc', '10', false, Request::instance()->param());
                $data = [];
                if(!empty($res))
                {
                    $page = $res->render();
                    $tt = ['1' =>'增加','2' => '减少'];
                    foreach ($res as $k => $v)
                    {
                        $data[$k]['id'] = $res[$k]['user_yingpiao_id'];
                        $data[$k]['type']  = $tt[$v['user_yingpiao_type']];
                        $data[$k]['before'] = $res[$k]['user_yingpiao_before'];
                        $data[$k]['change'] = $res[$k]['user_yingpiao_change'];
                        $data[$k]['after'] = $res[$k]['user_yingpiao_after'];
                        $data[$k]['cont'] = $res[$k]['user_yingpiao_cont'];
                        $data[$k]['time']  = replaceTime($v['user_yingpiao_time']);
                    }
                }
                // 把分页数据赋值给模板变量list
                $this->assign('data',$data);
                $this->assign('show',$page);
                return $this->fetch('get_user_logs1');
                break;
            case 3:
                //日志
                $res = PageSeach('user_tongzheng', ['user_id' => $user_id],[], 'user_tongzheng_id desc', '10', false, Request::instance()->param());
                $data = [];
                if(!empty($res))
                {
                    $page = $res->render();
                    $tt = ['1' =>'增加','2' => '减少'];
                    foreach ($res as $k => $v)
                    {
                        $data[$k]['id'] = $res[$k]['user_tongzheng_id'];
                        $data[$k]['type']  = $tt[$v['user_tongzheng_type']];
                        $data[$k]['before'] = $res[$k]['user_tongzheng_before'];
                        $data[$k]['change'] = $res[$k]['user_tongzheng_change'];
                        $data[$k]['after'] = $res[$k]['user_tongzheng_after'];
                        $data[$k]['cont'] = $res[$k]['user_tongzheng_cont'];
                        $data[$k]['time']  = replaceTime($v['user_tongzheng_time']);
                    }
                }
                // 把分页数据赋值给模板变量list
                $this->assign('data',$data);
                $this->assign('show',$page);
                return $this->fetch('get_user_logs1');
                break;
            case 4:
                //日志
                $res = PageSeach('user_puman', ['user_id' => $user_id],[], 'user_puman_id desc', '10', false, Request::instance()->param());
                $data = [];
                if(!empty($res))
                {
                    $page = $res->render();
                    $tt = ['1' =>'增加','2' => '减少'];
                    foreach ($res as $k => $v)
                    {
                        $data[$k]['id'] = $res[$k]['user_puman_id'];
                        $data[$k]['type']  = $tt[$v['user_puman_type']];
                        $data[$k]['before'] = $res[$k]['user_puman_before'];
                        $data[$k]['change'] = $res[$k]['user_puman_change'];
                        $data[$k]['after'] = $res[$k]['user_puman_after'];
                        $data[$k]['cont'] = $res[$k]['user_puman_cont'];
                        $data[$k]['time']  = replaceTime($v['user_puman_time']);
                    }
                }
                // 把分页数据赋值给模板变量list
                $this->assign('data',$data);
                $this->assign('show',$page);
                return $this->fetch('get_user_logs1');
                break;
        }
    }

    public function daoxu()
    {
        $res = Db::name('user')
            ->field('user_id,nickname,mobile,count(pid) as sum')
            ->group('pid')
            ->order('sum desc')->limit(10)
            ->select();
        pr($res);
    }
    public function user_qingchu()
    {
        $this->assign('name','果实');
        return $this->fetch();
    }
    public function user_qingchu_edit()
    {
        $cont = $this->request->post('cont');
        if(empty($cont))
        {
            ajaxError('请填写内容');
        }
        $cont2 = explode("\n",$cont);
        if(empty($cont2))
        {
            ajaxError('请填写内容');
        }
        if(count($cont2) > 100)
        {
            ajaxError('一次最多提交100个号码！');
        }
        $ress = '';
        foreach ($cont2 as $v)
        {
            //判断该手机号是否已注册
            $user_id = Db::name('user')->where('mobile',$v)->value('user_id');
            if($user_id > 0)
            {
                $mobile2 = '163' . mt_rand(11111111, 99999999);
                //修改账号
                $update = [
                    'username'  => $mobile2,
                    'mobile'    => $mobile2,
                ];
                $res =  Db::name('user')->where('user_id',$user_id)->update($update);
                if($res)
                {
                    //清除用户缓存信息 重新登录
                    del_user_token($user_id);
                    $ress .= '该号码['.$v.']修改成功'.PHP_EOL;
                }else{
                    $ress .= '该号码['.$v.']修改失败！'.PHP_EOL;
                }
            }else{
                $ress .= '该号码['.$v.']不存在！'.PHP_EOL;
            }
        }
        ajaxSuccess($ress);
    }
    /**
     * 增加页面
     */
    public function user_all_add()
    {
        $type = $this->request->get('type');
        $this->assign('type',$type);
        switch ($type)
        {
            case 1:
                $this->assign('name','任务包');
                $info = Db::name('task_pack')->field('task_pack_id,name')->order('paixu asc')->select();
                $this->assign('info',$info);
                return $this->fetch('user_all_add2');
                break;
            case 2:
                $this->assign('name','影票');
                break;
            case 3:
                $this->assign('name','通证');
                break;
            case 4:
                $this->assign('name','扑满');
                break;
            default:
                ajaxError('类型选择错误');
                break;
        }
        return $this->fetch();
    }
    /**
     * 增加处理
     */
    public function user_all_add_edit()
    {
        $type = $this->request->post('type');
        $num = $this->request->post('num');
        $ids = $this->request->post('cont');
        $desc = $this->request->post('desc');
        if(!is_numeric($num))
        {
            ajaxError('数量填写有误');
        }
        if($num < 0)
        {
            ajaxError('数量填写有误');
        }
        if(empty($ids))
        {
            ajaxError('id填写有误');
        }
        switch ($type)
        {
            case 1:
                if($desc <= 0)
                {
                    ajaxError('请选择任务包');
                }
                break;
            case 2:case 3:case 4:case 5:case 6:
            if(empty($desc))
            {
                ajaxError('增加理由不能少');
            }
            break;
            default:
                ajaxError('类型选择错误');
                break;
        }
        //整理人
        $asd = explode("\n",$ids);
        $asdasd = implode(',',$asd);
        $info =[
            'user_id'   => $asdasd,
            'num'       => $num,
            'desc'      => $desc,
            'type'      => $type,
            'key'       => config('key'),    //key
        ];
        $url = 'http://127.0.0.1:9510/system/add_gold_integral_dian';
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }

    /**
     * 修改所有
     */
    public function user_edit_all()
    {
        $id = $this->request->post('id');
        $key = $this->request->post('key');
        $val = $this->request->post('val');
        if(!empty($id) && !empty($key))
        {
            if($key == 'pay_password')
            {
                $val = password_hash($val,PASSWORD_DEFAULT);
            }
            $update = [$key => $val];
            $res =  Db::table('user')->where('user_id',$id)->update($update);
            if($res)
            {
                ajaxSuccess('操作成功');
            }else{
                ajaxError('内容填写有误');
            }
        }
    }

    /**
     * 修改
     */
    public function user_edit()
    {
        $user_id = $this->request->post('user_id',0);
        $img = $this->request->post('img','');
        $nickname = $this->request->post('nickname','');
        $auth_name = $this->request->post('auth_name','');
        $auth_num = $this->request->post('auth_num','');
        $password = $this->request->post('password','');
        $pay_password = $this->request->post('pay_password','');
        $cont = $this->request->post('cont','');

        if($user_id < 1){
            ajaxError('用户id不能为空');
        }

        $update = [];
        if($img){
            $update['avatar'] = $img;
        }
        if($nickname){
            $update['nickname'] = $nickname;
        }
        if($auth_name){
            $update['auth_name'] = $auth_name;
        }
        if($auth_num){
            $update['auth_num'] = $auth_num;
        }
        if($password){
            $update['password'] = password_hash($password,PASSWORD_DEFAULT);
        }
        if($pay_password){
            $update['pay_password'] =  password_hash($pay_password,PASSWORD_DEFAULT);;
        }
        $update['cont'] = $cont;
        $res =  Db::table('ds_user')->where('user_id',$user_id)->update($update);
        if($res)
        {
            ajaxSuccess('操作成功');
        }else{
            ajaxError('修改失败');
        }
    }


    public function user_yc_set()
    {
        $user_id = $this->request->post('id',0);
        $type = $this->request->post('type','');
        $res = Db::name('user')->where('user_id',$user_id)->update(['yunc' =>$type ]);
        if ($res) {
            ajaxSuccess('操作成功');
        } else {
            ajaxError('操作失败,请重试');
        }
    }
    public function update_daren_di()
    {
        $user_id = $this->request->post('user_id',0);
        //查找当前用户下个等级
        $group = Db::name('user')->where('user_id',$user_id)->value('group');
        if($group <= 0)
        {
            ajaxError('已是最低等级');
        }
        $url = 'http://127.0.0.1:9510/system/xingjidi';
        $info = [
            'user_id'   => $user_id,
            'key'       => config('key'),    //key
        ];
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }
    /**
     * 达人升级
     */
    public function update_daren()
    {
        $user_id = $this->request->post('user_id',0);
        //查找当前用户下个等级
        $group = Db::name('user')->where('user_id',$user_id)->value('group');
        if($group >= 5)
        {
            ajaxError('已是最高等级');
        }
        $url = 'http://127.0.0.1:9510/system/xingji';
        $info = [
            'user_id'   => $user_id,
            'key'       => config('key'),    //key
        ];
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }

    /**
     * 设置首码
     */
    public function set_shouma()
    {
        $set_shouma        =$this->xiao_redis->get('set_shouma');
        if(!empty($set_shouma))
        {
            $set_shouma = json_decode($set_shouma,true);
            $set_shouma = implode(PHP_EOL,$set_shouma);
        }else{
            $set_shouma = '';
        }
        $this->assign('data',$set_shouma);
        $this->assign('name','set_shouma');
        return $this->fetch();
    }
    /**
     * 设置不上排名
     */
    public function set_paiming()
    {
        $get_rank        =$this->xiao_redis->get('get_rank');
        if(!empty($get_rank))
        {
            $get_rank = implode(PHP_EOL,json_decode($get_rank,true));
        }else{
            $get_rank = '';
        }
        $this->assign('data',$get_rank);
        $this->assign('name','get_rank');
        return $this->fetch();
    }
    /**
     * 设置上排名
     */
    public function set_paiming2()
    {
        $get_rank2        =$this->xiao_redis->get('get_rank2');
        if(!empty($get_rank2))
        {
            $get_rank2 = implode(PHP_EOL,json_decode($get_rank2,true));
        }else{
            $get_rank2 = '';
        }
        $this->assign('data',$get_rank2);
        $this->assign('name','get_rank2');
        return $this->fetch();
    }
    /**
     * 设置不能更新达人
     */
    public function set_daren()
    {
        $labour_update_false        =$this->xiao_redis->get('labour_update_false');
        if(!empty($labour_update_false))
        {
            $labour_update_false = implode(PHP_EOL,json_decode($labour_update_false,true));
        }else{
            $labour_update_false = '';
        }
        $this->assign('data',$labour_update_false);
        $this->assign('name','labour_update_false');
        return $this->fetch();
    }
    /**
     * 设置查看团队信息的上级是官方的用户
     */
    public function set_guanfang()
    {
        $set_guanfang        =$this->xiao_redis->get('set_guanfang');
        if(!empty($set_guanfang))
        {
            $set_guanfang = implode(PHP_EOL,json_decode($set_guanfang,true));
        }else{
            $set_guanfang = '';
        }
        $this->assign('data',$set_guanfang);
        $this->assign('name','set_guanfang');
        return $this->fetch();
    }

    /**
     * 设置实名
     */
    public function set_shiming()
    {
        return $this->fetch();
    }
    public function set_guanliyuan()
    {
        $set_guanliyuan        =$this->xiao_redis->get('set_guanliyuan');
        if(!empty($set_guanliyuan))
        {
            $set_guanliyuan = implode(PHP_EOL,json_decode($set_guanliyuan,true));
        }else{
            $set_guanliyuan = '';
        }
        $this->assign('data',$set_guanliyuan);
        $this->assign('name','set_guanliyuan');
        return $this->fetch();
    }
    /**
     * 实名
     */
    public function set_shiming_edit()
    {
        $ids = $this->request->post('cont');
        if(empty($ids))
        {
            ajaxError('id填写有误');
        }
        //整理人
        $asd = explode("\n",$ids);
        $url = 'http://127.0.0.1:9510/system/automatic_real_name';
        foreach ($asd as $v)
        {
            $info =[
                'user_id'   => $v,
                'key'  => config('key'),    //key
            ];
            VyangAdminPush::https_post($url, $info);
        }
        ajaxSuccess('操作成功');
    }
    public function user_pay_vip()
    {
        $type = $this->request->get('type',1);
        $this->assign('type',$type);
        if($type == 1)
        {
            $this->assign('name','开通视频会员');
        }else{
            $this->assign('name','开通风楼会员');
        }
        return $this->fetch();
    }
    public function user_del_vip()
    {
        return $this->fetch();
    }
    public function user_song_ci()
    {
        return $this->fetch();
    }
    public function user_pay_vip_edit()
    {
        $id = $this->request->post('id',1);
        $type = $this->request->post('type',1);
        $day = $this->request->post('day',1);
        $user_id = Db::name('user')->where('user_id',$id)->value('user_id');
        if(!$user_id)
        {
            ajaxError('请输入系统内容的用户！');
        }
        $url = 'http://127.0.0.1:9510/system/pay_vip';
        $info = [
            'user_id'   => $id,
            'type'      => $type,
            'day'       => $day,
            'key'       => config('key'),    //key
        ];
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }
    public function user_del_vip_edit()
    {
        $id = $this->request->post('id',1);
        $type = $this->request->post('type',1);
        $user_id = Db::name('user')->where('user_id',$id)->value('user_id');
        if(!$user_id)
        {
            ajaxError('请输入系统内容的用户！');
        }
        $url = 'http://127.0.0.1:9510/system/off_vip';
        $info = [
            'user_id'   => $id,
            'type'      => $type,
            'key'       => config('key'),    //key
        ];
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }
    public function user_team_login()
    {
        $id = $this->request->post('id',1);
        $url = 'http://127.0.0.1:9510/system/team_login';
        $info = [
            'user_id'   => $id,
            'key'       => config('key'),    //key
        ];
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }
    public function user_zhi_login()
    {
        $id = $this->request->post('id',1);
        $url = 'http://127.0.0.1:9510/system/zhi_login';
        $info = [
            'user_id'   => $id,
            'key'       => config('key'),    //key
        ];
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }
    public function user_jian_login()
    {
        $id = $this->request->post('id',1);
        $url = 'http://127.0.0.1:9510/system/jian_login';
        $info = [
            'user_id'   => $id,
            'key'       => config('key'),    //key
        ];
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }
    public function user_jinri_login()
    {
        $id = $this->request->post('id',1);
        $bt = $this->request->post('bt','');
        $url = 'http://127.0.0.1:9510/system/jinri_login';
        $info = [
            'user_id'   => $id,
            'bt'        => $bt,
            'key'       => config('key'),    //key
        ];
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }

    public function open_vip()
    {
        $user_id = $this->request->post('user_id',0);
        $url = 'http://127.0.0.1:9510/system/open_vip';
        $info = [
            'user_id'   => $user_id,
            'key'       => config('key'),    //key
        ];
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }

    public function user_song_ci_edit()
    {
        $id = $this->request->post('id',1);
        $type = $this->request->post('type',1);
        $user_id = Db::name('user')->where('user_id',$id)->value('user_id');
        if(!$user_id)
        {
            ajaxError('请输入系统内容的用户！');
        }
        $ci = $this->request->post('ci',1);
        if(!is_numeric($ci))
        {
            ajaxError('请输入正确的次数！');
        }
        if($ci < 1)
        {
            ajaxError('请输入正确的次数！');
        }
        $url = 'http://127.0.0.1:9510/system/song_ci';
        $info = [
            'user_id'   => $id,
            'type'      => $type,
            'ci'        => $ci,
            'key'       => config('key'),    //key
        ];
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('操作成功');
    }

    public function auth_shibai_do(){
        $id = $this->request->post('id',0);
        if(empty($id)){
            ajaxError('请选择用户');
        }

        $this->xiao_redis->select(3);
        $this->xiao_redis->del('auth_shibai_ci'.$id);
        $this->xiao_redis->del('auth_shibai_huoqu_ci'.$id);
        $this->xiao_redis->del('auth_shibai_ci_new'.$id);
        ajaxSuccess('操作成功');
    }

    /**
     * 清理环信token
     * @return void
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     */
    public function del_hunaxin_token(){
        $id = $this->request->post('id',0);
        if(empty($id)){
            ajaxError('请选择用户');
        }
        $user = Db::name('user')->where('user_id',$id)->find();
        if(empty($user['huanxin_token'])){
            ajaxError('该用户的令牌已经是空的');
        }
        $res = Db::name('user')->where('user_id',$id)->update(['huanxin_token'=>'']);
        if($res){
            ajaxSuccess('操作成功');
        }else{
            ajaxError('操作失败，请稍后再试');
        }
    }

    /**
     * 备注
     * @return void
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     */
    public function user_beizhu(){
        $id = $this->request->post('id',0);
        $cont = $this->request->post('cont',0);
        $user = Db::name('user')->where('user_id',$id)->find();
        if(empty($user['user_id'])){
            ajaxError('该用户无效');
        }
        $re = Db::name('user')->where('user_id',$id)->update([
            'cont' => $cont
        ]);
        if(!empty($re)){
            ajaxSuccess('成功');
        }else{
            ajaxError('提交失败,本身没有备注信息');
        }
    }
    public function chazhitui()
    {
        $limit = $this->request->get('limit', 10);
        $begintime = $this->request->get('begintime', date('Y-m-d'));
        //申请时间 日 $begintime 2020-04-22 时间字符串
        if (!empty($begintime)) {
            $begintime1 = strtotime($begintime);//开始时间
            $end_time1 = strtotime(date('Y-m-d 23:59:59', $begintime1));//结束时间
        }else{
            $begintime1 = strtotime(date('Y-m-d'));
            $end_time1 = strtotime(date('Y-m-d 23:59:59', $begintime1));//结束时间
        }
        $list = Db::name('user')
            ->where('reg_time','>=',$begintime1)
            ->where('reg_time','<=',$end_time1)
            ->field('pid,count(`pid`) AS `count`')
            ->group('pid')
            ->order('count desc')
            ->paginate($limit,false,['query' => Request::instance()->param()]);
//        pr($list);
//        exit;
        if (!empty($list))
        {
            $page = $list->render();
            $listall = $list->all();
            $a2 = [0 => '状态正常', 1 => '黑名单',2 => '假注销'];
            foreach ($listall as $k => $v)
            {
                $user_id = $v['pid'];
                $infoss = Db::name('user')->where('user_id',$user_id)->field('mobile,login_status,cont')->find();

                $listall[$k]['mobile'] = $infoss['mobile'];
                $listall[$k]['login_status'] = $infoss['login_status'];
                $listall[$k]['cont'] = $infoss['cont'];
                $listall[$k]['login_status2'] = $a2[$infoss['login_status']];
                $this->xiao_redis->select(6);
                $listall[$k]['team'] = $this->xiao_redis->sCard($user_id . '_team_user') ? $this->xiao_redis->sCard($user_id . '_team_user') : '0';
                $listall[$k]['_team_user_real'] = $this->xiao_redis->sCard($user_id . '_team_user_real') ? $this->xiao_redis->sCard($user_id . '_team_user_real') : '0';

                $this->xiao_redis->select(5);
                $listall[$k]['_zhi_user'] = $this->xiao_redis->get($user_id . '_zhi_user') ? $this->xiao_redis->get($user_id . '_zhi_user') : '0';
                $listall[$k]['_jian_user'] = $this->xiao_redis->get($user_id . '_jian_user') ? $this->xiao_redis->get($user_id . '_jian_user') : '0';
                $listall[$k]['_zhi_user_real'] = $this->xiao_redis->get($user_id . '_zhi_user_real') ? $this->xiao_redis->get($user_id . '_zhi_user_real') : '0';
                $listall[$k]['_jian_user_real'] = $this->xiao_redis->get($user_id . '_jian_user_real') ? $this->xiao_redis->get($user_id . '_jian_user_real') : '0';
                //查询个人贡献值
                $listall[$k]['geren_huoyue'] = $this->xiao_redis->get($user_id.'_gongxianzhi')?$this->xiao_redis->get($user_id.'_gongxianzhi'):0;
                $listall[$k]['team_login_status'] = $this->xiao_redis->get($user_id . '_team_login_status') ? $this->xiao_redis->get($user_id . '_team_login_status') : '0';

                $listall[$k]['zhi_login_status'] = $this->xiao_redis->get($user_id . '_zhi_login_status') ? $this->xiao_redis->get($user_id . '_zhi_login_status') : '0';
                $listall[$k]['jian_login_status'] = $this->xiao_redis->get($user_id . '_jian_login_status') ? $this->xiao_redis->get($user_id . '_jian_login_status') : '0';

                $listall[$k]['jinri_login_status'] = $this->xiao_redis->get($user_id .$begintime. '_jinri_login_status') ? $this->xiao_redis->get($user_id . $begintime.'_jinri_login_status') : '0';

                //查询团队贡献值
                $team_huoyue  = $this->xiao_redis->get($user_id.'_team_gongxianzhi') ? $this->xiao_redis->get($user_id.'_team_gongxianzhi')  : 0;

                //大小区贡献值
                $_daqu_gongxianzhi_user_id = $this->xiao_redis->get($user_id.'_daqu_gongxianzhi_user_id')?$this->xiao_redis->get($user_id.'_daqu_gongxianzhi_user_id'):0;
                if($_daqu_gongxianzhi_user_id > 0)
                {
                    $_daqu_gongxianzhi_user_id_2 = $this->xiao_redis->get($user_id.'_daqu_gongxianzhi_user_id_2')?$this->xiao_redis->get($user_id.'_daqu_gongxianzhi_user_id_2'):0;
                    if($_daqu_gongxianzhi_user_id_2 > 0)
                    {
                        $daqu_huoyue = $this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_team_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_team_gongxianzhi'):0;
                        $daqu_huoyue += $this->xiao_redis->get($_daqu_gongxianzhi_user_id_2.'_team_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id_2.'_team_gongxianzhi'):0;
                        $ree = $this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_gongxianzhi'):0;
                        $ree += $this->xiao_redis->get($_daqu_gongxianzhi_user_id_2.'_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id_2.'_gongxianzhi'):0;
                    }else{
                        $daqu_huoyue = $this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_team_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_team_gongxianzhi'):0;
                        $ree = $this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_gongxianzhi')?$this->xiao_redis->get($_daqu_gongxianzhi_user_id.'_gongxianzhi'):0;
                    }
                    $daqu_huoyue += (int)$ree;
                    $xiaoqu_huoyue = (int)($team_huoyue - $daqu_huoyue);
                }else{
                    $daqu_huoyue = 0;
                    $xiaoqu_huoyue  =  0;
                }

                $listall[$k]['team_huoyue'] = $team_huoyue;
                $listall[$k]['daqu_huoyue'] = $daqu_huoyue;
                $listall[$k]['xiaoqu_huoyue'] = $xiaoqu_huoyue;
            }
            $listall = _xss($listall);
        }else{
            $listall = [];
            $page = '';
        }
        // 把分页数据赋值给模板变量list
        $this->assign('data', $listall);
        $this->assign('limit', $limit);
        $this->assign('show', $page);
        $this->assign('begintime', $begintime);

        return $this->fetch();
    }
    public function chaxunjinrizhitui()
    {
        $user_id = $this->request->param('id');
        if(!empty($user_id))
        {
            $begintime = $this->request->param('begintime', date('Y-m-d'));
            //申请时间 日 $begintime 2020-04-22 时间字符串
            if (!empty($begintime)) {
                $time = strtotime($begintime);//开始时间
                $end_time = strtotime(date('Y-m-d 23:59:59', strtotime($begintime)));//结束时间
                $map['reg_time'] = ['between', [$time, $end_time]];
            }

            $res = Db::name('user')->where('pid',$user_id)->where($map)->field('user_id,nickname,mobile,group,auth,reg_time,login_status')->select();
            if(!empty($res))
            {
                $a2 = [0 => '状态正常', 1 => '黑名单',2 => '假注销'];
                foreach ($res as $v)
                {
                    if($v['auth'] == 1)
                    {
                        $auth = '已实名';
                    }else{
                        $auth = '未实名';
                    }
                    $login_status2 = $a2[$v['login_status']];
                    $group_name = Db::name('user_group')->where('group', $v['group'])->value('group_name');
                    $time = date("Y-m-d H:i:s", (int)$v['reg_time']);
                    echo '用户id为：'.$v['user_id'].' 昵称为：'.$v['nickname'].' 手机号为：'.$v['mobile'].' 星级为：'.$group_name.' 实名状态：'.$auth.' 注册时间：'.$time." 账号状态：$login_status2<br>";
                }
            }else{
                echo '无直推';
            }
        }else{
            echo '无直推';
        }
    }

    public function cha_login_ip(){
        $limit = $this->request->get('limit', 10);
        $begintime = $this->request->get('begintime', date('Y-m-d'));
        //申请时间 日 $begintime 2020-04-22 时间字符串
        if (!empty($begintime)) {
            $begintime1 = strtotime($begintime);//开始时间
            $end_time1 = strtotime(date('Y-m-d 23:59:59', $begintime1));//结束时间
        }else{
            $begintime1 = strtotime(date('Y-m-d'));
            $end_time1 = strtotime(date('Y-m-d 23:59:59', $begintime1));//结束时间
        }


        $list = Db::name('user')
            ->where('reg_time','>=',$begintime1)
            ->where('reg_time','<=',$end_time1)
            ->field('ip,count(`ip`) AS `count`')
            ->group('ip')
            ->order('count desc')
            ->paginate($limit,false,['query' => Request::instance()->param()]);

        if (!empty($list))
        {
            $page = $list->render();
            $listall = $list->all();

            foreach ($listall as $k => $v)
            {
                $listall[$k]['number'] = $v['count'];
                $listall[$k]['ip'] = $v['ip'];

                $this->xiao_redis->select(2);
                $is_feng = $this->xiao_redis->get($v['ip'].'_admin_feng_'.$begintime);
                if($is_feng > 0){
                    $listall[$k]['is_feng'] = 1;
                }else{
                    $listall[$k]['is_feng'] = 0;
                }
            }
            $listall = _xss($listall);
        }else{
            $listall = [];
            $page = '';
        }

        // 把分页数据赋值给模板变量list
        $this->assign('data', $listall);
        $this->assign('limit', $limit);
        $this->assign('show', $page);
        $this->assign('begintime', $begintime);

        return $this->fetch();
    }

    public function login_ip(){
        $ip = $this->request->post('id', 0);
        $type = $this->request->post('type', 0);
        $bt = $this->request->post('bt', 0);
        if(empty($ip) || empty($type)){
            ajaxError('参数必填');
        }
        $data = [];
        if($type == '1'){
            $data['login_status'] = 1;
        }else{
            $data['login_status'] = 0;
        }

        if($type == '1'){
            $url = 'http://127.0.0.1:9510/system_chad/jinri_ip_reg';
            $info = [
                'ip'   => $ip,
                'bt'        => $bt,
                'type'        => 1,
                'key'       => config('key'),    //key
            ];
            VyangAdminPush::https_post($url, $info);
        }else{
            $url = 'http://127.0.0.1:9510/system_chad/jinri_ip_reg';
            $info = [
                'ip'   => $ip,
                'bt'        => $bt,
                'type'        => 2,
                'key'       => config('key'),    //key
            ];
            VyangAdminPush::https_post($url, $info);
        }

        ajaxSuccess('成功');

//        //同步
//        $res = Db::name('user')->where('ip',$ip)->update($data);
//        if($res){
//            $this->xiao_redis->select(2);
//            if($type == '1'){
//                $data['login_status'] = 1;
//                $this->xiao_redis->set($ip.'_admin_feng_'.$bt,1);
//            }else{
//                $data['login_status'] = 0;
//                $this->xiao_redis->set($ip.'_admin_feng_'.$bt,0);
//            }
//            ajaxSuccess('成功');
//        }else{
//            ajaxError('当前人数较多，请稍后再试');
//        }
    }

    public function get_bao(){
        $user_id = $this->request->get('user_id',0);

        if(!$user_id)
        {
            ajaxError('系统没有此账号！');
        }
        $res = Db::name('user_task_pack')->where('status',1)->where('user_id',$user_id)->select();
        if(empty($res))
        {
            echo '没有信息！';
        }else{
            foreach ($res as $v)
            {

                echo "持有包：[".$v['name']."]，领取时间：[".replaceTime($v['time'])."]，领取原因：[".$v['yuanyin']."]，已做天数：[".$v['do_day']."]，剩余待释放：[".$v['shengyu']."]<br>";
            }
       
        }
    }

    public function chaxun_ip()
    {
        $user_id = $this->request->param('id');
        if(!empty($user_id))
        {
            $begintime = $this->request->param('begintime', date('Y-m-d'));
            //申请时间 日 $begintime 2020-04-22 时间字符串
            if (!empty($begintime)) {
                $time = strtotime($begintime);//开始时间
                $end_time = strtotime(date('Y-m-d 23:59:59', strtotime($begintime)));//结束时间
                $map['reg_time'] = ['between', [$time, $end_time]];
            }

            $res = Db::name('user')->where('ip',$user_id)->where($map)->field('user_id,nickname,mobile,group,auth,reg_time,login_status')->select();
            if(!empty($res))
            {
                $a2 = [0 => '状态正常', 1 => '黑名单',2 => '假注销'];
                foreach ($res as $v)
                {
                    if($v['auth'] == 1)
                    {
                        $auth = '已实名';
                    }else{
                        $auth = '未实名';
                    }
                    $login_status2 = $a2[$v['login_status']];
                    $group_name = Db::name('user_group')->where('group', $v['group'])->value('group_name');
                    $time = date("Y-m-d H:i:s", (int)$v['reg_time']);
                    echo '用户id为：'.$v['user_id'].' 昵称为：'.$v['nickname'].' 手机号为：'.$v['mobile'].' 星级为：'.$group_name.' 实名状态：'.$auth.' 注册时间：'.$time." 账号状态：$login_status2<br>";
                }
            }else{
                echo '无';
            }
        }else{
            echo '无';
        }
    }

}
