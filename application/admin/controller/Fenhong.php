<?php
namespace app\admin\controller;

use app\common\model\BtnumLog;
use app\common\model\UserContribution;
use app\common\model\VyangAdminPush;
use think\Db;
use think\Request;

/**
 * 分红
 * Class Fenhong
 * @package app\admin\controller
 */
class Fenhong extends Common
{
    /**
     * 初始加载
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        //加载是否选中
        $this->assign('active','8');
    }

    public function index()
    {
        $zuo_day = date('Y-m-d',strtotime("-1 day"));
        $res = Db::name('user_group')->where('group','>',0)->select();
        if(!empty($res))
        {
            //查询昨天所有交易手续费
            $this->xiao_redis->select(0);
            $numm = (int)$this->xiao_redis->get($zuo_day.'_yp_to_tz_shouxu');
            //整理数据
            foreach ($res as $k => $v)
            {
                $res[$k]['kuangji'] = Db::name('task_pack')->where('task_pack_id',$v['group_jifen'])->value('name');
                //查找不同等级下的人数
                $all_uid = Db::name('user')->where('group',$v['group'])->column('user_id');
                //计算用户是否满足条件
                if(!empty($all_uid))
                {
                    $all_uid2 = [];
                    foreach ($all_uid as $vr)
                    {
                        //判断满足条件
                        switch ($v['group'])
                        {
                            case 1:
                                //判断用户是否满足
                                $count = Db::name('user_task_pack')->where('user_id',$vr)->where('status',1)
                                    ->where('task_pack_id',1)->count();
                                if($count >=2 )
                                {
                                    $all_uid2[] = $vr;
                                }
                                break;
                            case 2:
                                //判断用户是否满足
                                $count = Db::name('user_task_pack')->where('user_id',$vr)->where('status',1)
                                    ->where('task_pack_id',2)->count();
                                if($count >=2 )
                                {
                                    $all_uid2[] = $vr;
                                }
                                break;
                            case 3:
                                //判断用户是否满足
                                $count = Db::name('user_task_pack')->where('user_id',$vr)->where('status',1)
                                    ->where('task_pack_id',3)->count();
                                if($count >=2 )
                                {
                                    $all_uid2[] = $vr;
                                }
                                break;
                            case 4:
                                //判断用户是否满足
                                $count = Db::name('user_task_pack')->where('user_id',$vr)->where('status',1)
                                    ->where('task_pack_id',4)->count();
                                if($count >=2 )
                                {
                                    $all_uid2[] = $vr;
                                }
                                break;
                            case 5:
                                //判断用户是否满足
                                $count = Db::name('user_task_pack')->where('user_id',$vr)->where('status',1)
                                    ->where('task_pack_id',5)->count();
                                if($count >=1 )
                                {
                                    $all_uid2[] = $vr;
                                }
                                break;
                        }
                    }
                    if(!empty($all_uid2))
                    {
                        $yes = count($all_uid2);
                        $res[$k]['num'] = $yes;
                        $res[$k]['ge'] = round($numm*$v['group_fenhong']/$yes,4);
                        $res[$k]['all_money'] = round($numm*$v['group_fenhong'],4);
                    }else{
                        $res[$k]['ge'] = 0;
                        $res[$k]['num'] = 0;
                        $res[$k]['all_money'] = 0;
                    }
                }else{
                    $res[$k]['ge'] = 0;
                    $res[$k]['num'] = 0;
                    $res[$k]['all_money'] = 0;
                }
            }
        }
        $this->xiao_redis->select(0);
        // 渲染模板输出
        $this->assign('res',$res);
        $bu_fenhong_id = $this->xiao_redis->get('bu_fenhong_id');
        $this->assign('bu_fenhong_id',$bu_fenhong_id);
        $day = date('Y-m-d');
        $this->xiao_redis->select(0);
        $shouxu = $this->xiao_redis->get($day.'_yp_to_tz_shouxu')?round($this->xiao_redis->get($day.'_yp_to_tz_shouxu'),4):0;
        $this->assign('_yp_to_tz_shouxu',$shouxu);

        $num = $this->xiao_redis->get($day.'_yp_to_tz_num')?round($this->xiao_redis->get($day.'_yp_to_tz_num'),4):0;
        $this->assign('_yp_to_tz_num',$num);

        $shouxu_zuo = $this->xiao_redis->get($zuo_day.'_yp_to_tz_shouxu')?round($this->xiao_redis->get($zuo_day.'_yp_to_tz_shouxu'),4):0;
        $this->assign('_yp_to_tz_shouxu_zuo',$shouxu_zuo);

        $num_zuo = $this->xiao_redis->get($zuo_day.'_yp_to_tz_num')?round($this->xiao_redis->get($zuo_day.'_yp_to_tz_num'),4):0;
        $this->assign('_yp_to_tz_num_zuo',$num_zuo);


        $zong_yp_to_tz_shouxu = $this->xiao_redis->get('_yp_to_tz_shouxu')?round($this->xiao_redis->get('_yp_to_tz_shouxu'),4):0;
        $this->assign('zong_yp_to_tz_shouxu',$zong_yp_to_tz_shouxu);

        $zong_yp_to_tz_num = $this->xiao_redis->get('_yp_to_tz_num')?round($this->xiao_redis->get('_yp_to_tz_num'),4):0;
        $this->assign('zong_yp_to_tz_num',$zong_yp_to_tz_num);

        $kongtou_ren = $this->xiao_redis->get('kongtou_ren')?$this->xiao_redis->get('kongtou_ren'):0;
        $this->assign('kongtou_ren',$kongtou_ren);

        $kongtou_bilie = $this->xiao_redis->get('kongtou_bilie')?$this->xiao_redis->get('kongtou_bilie'):0;
        $this->assign('kongtou_bilie',$kongtou_bilie);

        return $this->fetch();
    }
    public function fenhong_edit_hhr()
    {
        $key = $this->request->param('key');
        $val = $this->request->param('val','');
        if(empty($key))
        {
            ajaxError('请填写key');
        }
        $val = strval($val);
        if($key == 'bu_fenhong_id')
        {
            //判断格式是否正确
            if(!explode(',',$val))
            {
                ajaxError('填写的格式有问题！');
            }
        }
        //设置一下
        $this->xiao_redis->select(0);
        $res = $this->xiao_redis->set($key,$val);
        if($res)
        {
            ajaxSuccess('操作成功');
        }else{
            ajaxError('操作失败');
        }
    }
    //编辑
    public function edit()
    {
        $id     = $this->request->post('id');
        $name   = $this->request->post('name');
        $val    = $this->request->post('val');
        $update = [
            $name   => $val
        ];
        if($id == 9999)
        {
            if($name == 'group_fen')
            {
                $this->xiao_redis->select(0);
                $this->xiao_redis->set('fenhong_gongzuoshi_num',$val);
                ajaxSuccess('操作成功');
            }
            ajaxError('无法修改');
        }
        if(check_mohu_str('daren',$name))
        {
            $res = Db::table('user_daren')->where('user_daren_id',$id)->update($update);
            caozuo($res);
        }else{
            $res = Db::table('ds_user_group')->where('user_group_id',$id)->update($update);
            if($res)
            {
                $day = date('Y-m-d');
                $this->xiao_redis->select(0);
                $names = 'fenhong_'.$day.'_'.($id-1);
                $this->xiao_redis->set($names,$val);
                //设置过期时间
                $this->xiao_redis->expire($names,86400);
                ajaxSuccess('操作成功');
            }else{
                ajaxError('操作失败，请稍后重试');
            }
        }
    }
    //处理分红
    public function fenhong()
    {
        $url = 'http://127.0.0.1:9510/system/fenhong';

        $info = [
            'key'  => config('key'),    //key
        ];
        VyangAdminPush::https_post($url, $info);
        ajaxSuccess('分红完成');
    }
    public function fenhong_log()
    {
        $id     = $this->request->get('id','');
        $update_chuli     = $this->request->get('update_chuli','');
        $page = '';
        $map = [];
        $type = $this->request->get('type',1);
        $this->assign('type',$type);
        if(!empty($id))
        {
            $map['id'] = ['eq', $id];
        }
        if(!empty($update_chuli))
        {
            if($type == 1)
            {
                $map['update_chuli'] = ['eq', $update_chuli-1];
            }else{
                $map['daren_chuli'] = ['eq', $update_chuli-1];
            }
        }
        $update_chuli = ['0' =>'未处理','1' => '已处理'];
        if($type == 1)
        {
            $list = PageSeach('ds_user_group_update', $map,[], 'group_update desc', 10, false, Request::instance()->param());
            if(!empty($list))
            {
                $page = $list->render();
                $list = $list->all();
                //整理数据
                foreach ($list as $k => $v)
                {
                    $list[$k]['update_time'] = replaceTime($v['update_time']);
                    $list[$k]['update_chuli2'] = $update_chuli[$v['update_chuli']];
                }
            }
            // 渲染模板输出
            $this->assign('update_chuli',$update_chuli);
            $this->assign('show',$page);
            $this->assign('list',$list);
            return $this->fetch('fenhong_log1');
        }else{
            $list = PageSeach('ds_user_daren_update', $map,[], 'daren_update desc', 10, false, Request::instance()->param());
            if(!empty($list))
            {
                $page = $list->render();
                $list = $list->all();
                //整理数据
                foreach ($list as $k => $v)
                {
                    $list[$k]['daren_time'] = replaceTime($v['daren_time']);
                    $list[$k]['daren_chuli2'] = $update_chuli[$v['daren_chuli']];
                }
            }
            // 渲染模板输出
            $this->assign('update_chuli',$update_chuli);
            $this->assign('show',$page);
            $this->assign('list',$list);
            return $this->fetch('fenhong_log2');
        }
    }
    //批量手动处理
    public function fenhong_listEdit()
    {
        $arr    = $this->request->post('arr/a');
        $tt     = $this->request->post('tt');
        if($tt == 1)
        {
            $where['group_update'] = ['in', implode(',', $arr)];
            $res2 = Db::table('ds_user_group_update')->where($where)->update(['update_chuli' => 1]);
        }else{
            $where['daren_update'] = ['in', implode(',', $arr)];
            $res2 = Db::table('ds_user_group_update')->where($where)->update(['daren_chuli' => 1]);
        }
        caozuo($res2);
    }
    //手动处理
    public function fenhong_edit()
    {
        $tt     = $this->request->post('tt');
        $id     = $this->request->post('id');
        if($tt == 1)
        {
            $res2 = Db::table('ds_user_group_update')->where('group_update',$id)->update(['update_chuli' => 1]);
        }else{
            $res2 = Db::table('ds_user_daren_update')->where('daren_update',$id)->update(['daren_chuli' => 1]);
        }
        caozuo($res2);
    }
    //
}
